name: version
run-name: version

permissions:
  contents: read
  pull-requests: read

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # - name: setup node
      #   uses: actions/setup-node@v4
      #   with:
      #     node-version: 20
      - name: setup git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - id: latest_version
        name: get latest version
        run: |
          echo "Getting latest version..."
          latest_tag=$(git describe --tags --abbrev=0) || echo "v0.0.0"
          echo "Latest tag: $latest_tag"
          latest_version=${latest_tag#v}
          echo "latest_version=$latest_version" >> "$GITHUB_OUTPUT"
      - id: version_type
        name: get version_type
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          version_type="minor"  # Default to minor if no specific tag is found
          if echo "$pr_title" | grep -qi '\[major\]'; then
            version_type="major"
          elif echo "$pr_title" | grep -qi '\[minor\]'; then
            version_type="minor"
          elif echo "$pr_title" | grep -qi '\[patch\]'; then
            version_type="patch"
          fi
          echo "version_type=$version_type" >> "$GITHUB_OUTPUT"
      - id: new_version
        name: generate new version
        run: |
          latest_version="${{ steps.latest_version.outputs.latest_version }}"
          version_type="${{ steps.version_type.outputs.version_type }}"
          echo "Latest version: $latest_version"
          echo "Version type: $version_type"
          IFS='.' read -r major minor patch <<< "$latest_version"
          echo "Current version: $major.$minor.$patch"
          case "$version_type" in
            major)
              echo "processing major version increment"
              ((major++))
              echo "l1"
              minor=0
              echo "l2"
              patch=0
              echo "l3"
              ;;
            minor)
              echo "processing minor version increment"
              ((minor++))
              echo "l4"
              patch=0
              echo "l5"
              ;;
            patch)
              echo "processing patch version increment"
              ((patch++))
              echo "l6"
              ;;
          esac
          new_version="v$major.$minor.$patch"
          echo "New version: $new_version"
          echo "tag=$new_version" >> "$GITHUB_OUTPUT"
      - name: set tag
        run: git tag -a ${{ steps.new_version.outputs.tag }} -m "Release ${{ steps.new_version.outputs.tag }}"
      - run: git push origin ${{ steps.new_version.outputs.tag }}

      - name: install dependencies
        run: |
          echo "Installing dependencies..."
          echo "Install done!"
      - name: build
        run: |
          mkdir -p dist
          cp src/* dist/
      - name: pack
        run: |
          echo "Packing files..."
          tar -czf public.tar.gz dist/*
          echo "Packing done!"
      - name: create release
        run: gh release create ${{ steps.new_version.outputs.tag }} public.tar.gz --title "Release ${{ steps.new_version.outputs.tag }}" --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
